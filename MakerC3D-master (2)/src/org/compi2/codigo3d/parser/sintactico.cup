package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal String RELACIONAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D andLogico,orLogico,notLogico;
nonterminal NodoC3D inicial, expresion;


precedence left orLogico; 
precedence left andLogico; 
precedence left notLogico;

precedence left RELACIONAL;
 



precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 





start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        RESULT = exp;
                      //  ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

            | notLogico expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
           
            |   expresion:izq orLogico  expresion:der 
                     {: 
                         
                       //(b<=c)&&(a==x)
                        String etV="";
                        String etF="";
                        String cadGen="";
                        if(ControlC3D.getPre()==0){
                            etV=ControlC3D.genEtiqueta();
                            etF=ControlC3D.genEtiqueta();
                            ControlC3D.almacenarEv(etV);
                            cadGen="\n if "+izq.getCad()+" goto "+etV+";\n";
                            cadGen+="goto "+etF+";\n";
                            cadGen+=etF+":\n";

                               etV=ControlC3D.genEtiqueta();
                               etF=ControlC3D.genEtiqueta();
                               ControlC3D.almacenarEv(etV);
                               
                               cadGen+="\n if "+der.getCad()+" goto "+etV+";\n";
                               cadGen+="goto "+etF+";\n";
                               cadGen+=etF+":\n";
                               
                              
                               cadGen+=ControlC3D.getEv()+":\n";
                        }else{
                               etV=ControlC3D.genEtiqueta();
                               etF=ControlC3D.genEtiqueta();
                               ControlC3D.almacenarEv(etV);
                               
                               cadGen+="\n if "+der.getCad()+" goto "+etV+";\n";
                               cadGen+="goto "+etF+";\n";
                               cadGen+=etF+":\n";
                               
                               cadGen+=ControlC3D.getEv()+":\n";
                        }
                         
                              ControlC3D.setPre(1); 
                              ControlC3D.agregarC3D(cadGen);
                              ControlC3D.formatearEf();
                        RESULT = new NodoC3D(ControlC3D.getEv());
                    :}
            |   expresion:izq andLogico expresion:der
                    {: 
                                               
                       //(b<=c)&&(a==x)
                        String etV="";
                        String etF="";
                        String cadGen="";
                        if(ControlC3D.getPre()==0){
                            etV=ControlC3D.genEtiqueta();
                            etF=ControlC3D.genEtiqueta();
                            ControlC3D.almacenarEf(etF);
                            cadGen="\n if "+izq.getCad()+" goto "+etV+";\n";
                            cadGen+="goto "+etF+";\n";
                            cadGen+=etV+":\n";

                            etV=ControlC3D.genEtiqueta();
                               etF=ControlC3D.genEtiqueta();
                               ControlC3D.almacenarEf(etF);
                               
                               cadGen+="\n if "+der.getCad()+" goto "+etV+";\n";
                               cadGen+="goto "+etF+";\n";
                               cadGen+=etV+":\n";
                               
                              
                               cadGen+=ControlC3D.getEf()+":\n";
                        }else{
                               etV=ControlC3D.genEtiqueta();
                               etF=ControlC3D.genEtiqueta();
                               ControlC3D.almacenarEf(etF);
                               
                               cadGen+="\n if "+der.getCad()+" goto "+etV+";\n";
                               cadGen+="goto "+etF+";\n";
                               cadGen+=etV+":\n";
                               
                               cadGen+=ControlC3D.getEf()+":\n";
                        }
                         
                              ControlC3D.setPre(2); 
                              ControlC3D.agregarC3D(cadGen);
                              ControlC3D.formatearEv();
                        RESULT = new NodoC3D(ControlC3D.getEf());
                    :}
            |   expresion:izq RELACIONAL:r expresion:der
                    {: 
                    
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + r + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;